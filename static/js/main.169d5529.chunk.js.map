{"version":3,"sources":["components/Titles.js","components/Form.js","components/Weather.js","App.js","serviceWorker.js","index.js"],"names":["Titles","React","Component","Form","onSubmit","this","props","getWeather","type","name","placeholder","Weather","className","city","country","temperature","humidity","description","error","API_KEY","App","state","undefined","e","a","preventDefault","target","elements","value","fetch","api_call","json","data","console","log","setState","main","temp","sys","weather","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"qOAaeA,E,iLATP,OACI,6BACI,8CACA,wE,GALKC,IAAMC,WCYZC,E,iLAVP,OACI,0BAAMC,SAAUC,KAAKC,MAAMC,YACvB,2BAAOC,KAAK,OAAOC,KAAK,OAAOC,YAAY,SAC3C,2BAAOF,KAAK,OAAOC,KAAK,UAAUC,YAAY,YAC9C,oD,GANGT,IAAMC,WCeVS,E,iLAZP,OACI,yBAAKC,UAAU,gBACTP,KAAKC,MAAMO,MAAQR,KAAKC,MAAMQ,SAAW,wCAAeT,KAAKC,MAAMO,KAA1B,KAAoCR,KAAKC,MAAMQ,SACxFT,KAAKC,MAAMS,aAAe,2CAAkBV,KAAKC,MAAMS,YAA7B,oBAC1BV,KAAKC,MAAMU,UAAa,wCAAeX,KAAKC,MAAMU,SAA1B,MACxBX,KAAKC,MAAMW,aAAe,kDAAyBZ,KAAKC,MAAMW,aAC9DZ,KAAKC,MAAMY,OAAS,2BAAKb,KAAKC,MAAMY,Y,GARhCjB,IAAMC,WCGtBiB,G,MAAU,oCAyEDC,E,2MApEXC,MAAQ,CACJN,iBAAaO,EACbT,UAAMS,EACNR,aAASQ,EACTN,cAAUM,EACVL,iBAAaK,EACbJ,WAAOI,G,EAGXf,W,uCAAa,WAAOgB,GAAP,qBAAAC,EAAA,6DACTD,EAAEE,iBACIZ,EAAOU,EAAEG,OAAOC,SAASd,KAAKe,MAC9Bd,EAAUS,EAAEG,OAAOC,SAASb,QAAQc,MAHjC,SAIcC,MAAM,oDAAD,OAAqDhB,EAArD,YAA6DC,EAA7D,kBAA8EK,EAA9E,oBAJnB,cAIHW,EAJG,gBAKUA,EAASC,OALnB,OAKHC,EALG,OAMTC,QAAQC,IAAIF,GACRnB,GAAQC,EACR,EAAKqB,SAAS,CACVpB,YAAaiB,EAAKI,KAAKC,KACvBxB,KAAMmB,EAAKvB,KACXK,QAASkB,EAAKM,IAAIxB,QAClBE,SAAUgB,EAAKI,KAAKpB,SACpBC,YAAae,EAAKO,QAAQ,GAAGtB,YAC7BC,MAAO,KAIX,EAAKiB,SAAS,CACVpB,iBAAYO,EACZT,UAAMS,EACNR,aAASQ,EACTN,cAAUM,EACVL,iBAAaK,EACbJ,MAAO,2CAxBN,4C,8HA+BT,OACI,6BACI,yBAAKN,UAAU,WAEP,yBAAKA,UAAU,aACX,yBAAKA,UAAU,OACX,yBAAKA,UAAU,4BACX,kBAAC,EAAD,OAEJ,yBAAKA,UAAU,2BACf,kBAAC,EAAD,CAAML,WAAYF,KAAKE,aACvB,kBAAC,EAAD,CAASQ,YAAaV,KAAKgB,MAAMN,YACjCF,KAAMR,KAAKgB,MAAMR,KACjBC,QAAST,KAAKgB,MAAMP,QACpBE,SAAUX,KAAKgB,MAAML,SACrBC,YAAaZ,KAAKgB,MAAMJ,YACxBC,MAAOb,KAAKgB,MAAMH,iB,GA1DhCjB,IAAMC,WCPJsC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCANC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD+G3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.169d5529.chunk.js","sourcesContent":["import React from \"react\";\n\nclass Titles extends React.Component {\n    render() {\n        return (\n            <div>\n                <h1>Weather Finder</h1>\n                <p>Find out temperature and conditions.</p>\n            </div>\n        );\n    }\n};\n\nexport default Titles;","import React from \"react\";\n\nclass Form extends React.Component {\n    render() {\n        return (\n            <form onSubmit={this.props.getWeather}>\n                <input type=\"text\" name=\"city\" placeholder=\"city\"></input>\n                <input type=\"text\" name=\"country\" placeholder=\"country\"></input>\n                <button>Get Weather</button>\n            </form>\n        );\n    };\n};\n\nexport default Form;","import React from \"react\";\nimport '../App.css';\n\nclass Weather extends React.Component {\n    render() {\n        return (\n            <div className=\"weather_text\">\n                { this.props.city && this.props.country && <p>Location: { this.props.city }, { this.props.country }</p>}\n                { this.props.temperature && <p>Temperature: { this.props.temperature } &deg; Fahrenheit</p>}\n                { this.props.humidity &&  <p>Humidity: { this.props.humidity } %</p>}\n                { this.props.description && <p>Current Conditions: { this.props.description }</p>}\n                { this.props.error && <p>{ this.props.error }</p>}\n            </div>\n        );\n    };\n};\n\nexport default Weather;","import React from \"react\"; // have to do this for every project\nimport Titles from \"./components/Titles\"; // Import titles.js \nimport Form from \"./components/Form\"; // Import Form.js\nimport Weather from \"./components/Weather\"; // Import Weather.js\nimport { tsUndefinedKeyword } from \"@babel/types\";\n\nconst API_KEY = \"38358b62a57ba5c4cda581381e62de93\"; // API key from opensourceweather \n\n// Creating an instance of App extending React.Component from the node_modules\nclass App extends React.Component {\n    // Object that contains key value pairs\n    state = {\n        temperature: undefined,\n        city: undefined,\n        country: undefined,\n        humidity: undefined,\n        description: undefined,\n        error: undefined\n    }\n    // getWeather method that contains an arrow function to call the api \n    getWeather = async (e) => {\n        e.preventDefault();\n        const city = e.target.elements.city.value;\n        const country = e.target.elements.country.value;\n        const api_call = await fetch(`http://api.openweathermap.org/data/2.5/weather?q=${city},${country}&appid=${API_KEY}&units=imperial`);\n        const data = await api_call.json();// convert api_call to json\n        console.log(data);\n        if (city && country) {\n            this.setState({\n                temperature: data.main.temp,\n                city: data.name,\n                country: data.sys.country,\n                humidity: data.main.humidity,\n                description: data.weather[0].description,\n                error: \"\"\n            })\n\n        } else {\n            this.setState({\n                temperature:undefined,\n                city: undefined,\n                country: undefined,\n                humidity: undefined,\n                description: undefined,\n                error: \"Please enter a valid City and Country.\"\n            })\n\n        }\n         \n    }\n    render() { // returns jsx... react and babel work behind the scenes to convert this\n        return ( // can only return one parent element (one div etc. can have anything within it)\n            <div>\n                <div className=\"wrapper\">\n                    \n                        <div className=\"container\">\n                            <div className=\"row\">\n                                <div className=\"col-xs-5 title-container\">\n                                    <Titles />\n                                </div>\n                                <div className=\"col-xs-7 form-container\">\n                                <Form getWeather={this.getWeather}/> \n                                <Weather temperature={this.state.temperature} \n                                city={this.state.city}\n                                country={this.state.country}\n                                humidity={this.state.humidity}\n                                description={this.state.description}\n                                error={this.state.error} />\n                                </div>\n                            </div>\n                        </div>\n                    </div>\n                </div>\n            \n        );\n    }\n};\n\n\nexport default App; // tells the file to make the component available for other files to import (for index.js in this case)","\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './App.css';\nimport App from './App'; // imports the App.js\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}